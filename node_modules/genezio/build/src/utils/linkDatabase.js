import { promises as fs } from "fs";
import os from "os";
import path from "path";
async function getLinkContent() {
    const directoryPath = path.join(os.homedir(), ".genezio");
    const filePath = path.join(directoryPath, "geneziolinks");
    try {
        // Try to read the file
        const data = await fs.readFile(filePath, "utf8");
        // Parse the content as JSON and return as a Map
        return new Map(Object.entries(JSON.parse(data)));
    }
    catch (error) {
        const err = error;
        if (err.code === "ENOENT" || err.code === "ENOTDIR") {
            await fs.mkdir(directoryPath, { recursive: true });
            // If the file doesn't exist, create it with an empty object
            await fs.writeFile(filePath, JSON.stringify({}), "utf8");
            return new Map();
        }
        // Rethrow the error if it's not because the file doesn't exist
        throw error;
    }
}
export async function getLinkPathsForProject(projectName) {
    const content = await getLinkContent();
    const key = `${projectName}`;
    return content.get(key) || [];
}
export async function setLinkPathForProject(projectName, linkPath) {
    const content = await getLinkContent();
    const key = `${projectName}`;
    const paths = content.get(key) || [];
    if (paths.includes(linkPath)) {
        return;
    }
    paths.push(linkPath);
    content.set(key, paths);
    await saveLinkContent(content);
}
export async function deleteAllLinkPaths() {
    await saveLinkContent(new Map());
}
export async function deleteLinkPathForProject(projectName) {
    const content = await getLinkContent();
    const key = `${projectName}`;
    content.delete(key);
    await saveLinkContent(content);
}
async function saveLinkContent(content) {
    const directoryPath = path.join(os.homedir(), ".genezio");
    const filePath = path.join(directoryPath, "geneziolinks");
    await fs.writeFile(filePath, JSON.stringify(Object.fromEntries(content)), "utf8");
}
