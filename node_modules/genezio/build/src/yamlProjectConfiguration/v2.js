import { parse as parseYaml, stringify as stringifyYaml } from "yaml-transmute";
import zod from "zod";
import nativeFs from "fs";
import { regions } from "../utils/configs.js";
import { GENEZIO_CONFIGURATION_FILE_NOT_FOUND, UserError, zodFormatError } from "../errors.js";
import { Language } from "./models.js";
import { DEFAULT_ARCHITECTURE, DEFAULT_NODE_RUNTIME, supportedArchitectures, supportedNodeRuntimes } from "../models/projectOptions.js";
import { CloudProviderIdentifier } from "../models/cloudProviderIdentifier.js";
import { PackageManagerType } from "../packageManagers/packageManager.js";
import { TriggerType } from "./models.js";
import { isValidCron } from "cron-validator";
import { tryV2Migration } from "./migration.js";
import yaml from "yaml";
function parseGenezioConfig(config) {
    const languageSchema = zod.object({
        name: zod.nativeEnum(Language),
        runtime: zod.enum(supportedNodeRuntimes).optional(),
        architecture: zod.enum(supportedArchitectures).optional(),
        packageManager: zod.nativeEnum(PackageManagerType).optional(),
    });
    const scriptSchema = zod.array(zod.string()).or(zod.string()).optional();
    const methodSchema = zod
        .object({
        name: zod.string(),
        type: zod.literal(TriggerType.jsonrpc).or(zod.literal(TriggerType.http)),
    })
        .or(zod
        .object({
        name: zod.string(),
        type: zod.literal(TriggerType.cron),
        cronString: zod.string(),
    })
        .refine(({ type, cronString }) => {
        if (type === TriggerType.cron && cronString && !isValidCron(cronString)) {
            return false;
        }
        return true;
    }, "The cronString is not valid. Check https://crontab.guru/ for more information.")
        .refine(({ type, cronString }) => {
        const cronParts = cronString?.split(" ");
        if (type === TriggerType.cron &&
            cronParts &&
            cronParts[2] != "*" &&
            cronParts[4] != "*") {
            return false;
        }
        return true;
    }, "The day of the month and day of the week cannot be specified at the same time."));
    const classSchema = zod.object({
        name: zod.string().optional(),
        path: zod.string(),
        type: zod.nativeEnum(TriggerType).optional(),
        methods: zod.array(methodSchema).optional(),
    });
    const backendSchema = zod.object({
        path: zod.string(),
        language: languageSchema,
        scripts: zod
            .object({
            deploy: scriptSchema,
            local: scriptSchema,
        })
            .optional(),
        cloudProvider: zod
            .nativeEnum(CloudProviderIdentifier, {
            errorMap: (issue, ctx) => {
                if (issue.code === zod.ZodIssueCode.invalid_enum_value) {
                    return {
                        message: "Invalid enum value. The supported values are `genezio` or `selfHostedAws`.",
                    };
                }
                return { message: ctx.defaultError };
            },
        })
            .optional(),
        classes: zod.array(classSchema).optional(),
    });
    const frontendSchema = zod.object({
        path: zod.string(),
        sdk: zod
            .object({
            language: zod.nativeEnum(Language),
            path: zod.string().optional(),
        })
            .optional(),
        subdomain: zod.string().optional(),
        publish: zod.string().optional(),
        scripts: zod
            .object({
            build: scriptSchema,
            start: scriptSchema,
            deploy: scriptSchema,
        })
            .optional(),
    });
    const v2Schema = zod.object({
        name: zod.string().refine((value) => {
            const nameRegex = new RegExp("^[a-zA-Z][-a-zA-Z0-9]*$");
            return nameRegex.test(value);
        }, "Must start with a letter and contain only letters, numbers and dashes."),
        region: zod.enum(regions.map((r) => r.value)).optional(),
        yamlVersion: zod.number(),
        backend: backendSchema.optional(),
        frontend: zod.array(frontendSchema).or(frontendSchema).optional(),
    });
    return v2Schema.parse(config);
}
function fillDefaultGenezioConfig(config) {
    const defaultConfig = structuredClone(config);
    defaultConfig.region ??= "us-east-1";
    if (defaultConfig.backend) {
        switch (defaultConfig.backend.language.name) {
            case Language.ts:
            case Language.js:
                defaultConfig.backend.language.packageManager ??= PackageManagerType.npm;
                defaultConfig.backend.language.runtime ??= DEFAULT_NODE_RUNTIME;
                defaultConfig.backend.language.architecture ??= DEFAULT_ARCHITECTURE;
        }
        defaultConfig.backend.cloudProvider ??= CloudProviderIdentifier.GENEZIO;
    }
    if (defaultConfig.frontend && !Array.isArray(defaultConfig.frontend)) {
        defaultConfig.frontend = [defaultConfig.frontend];
    }
    return defaultConfig;
}
function replaceVariableInScript(script, variables) {
    if (!script) {
        return script;
    }
    if (Array.isArray(script)) {
        return script.map((s) => replaceVariableInScript(s, variables));
    }
    else {
        let newScript = script;
        if (variables.projectName) {
            newScript = newScript.replaceAll(/\${{\s*projectName\s*}}/g, variables.projectName);
        }
        if (variables.stage) {
            newScript = newScript.replaceAll(/\${{\s*stage\s*}}/g, variables.stage);
        }
        return newScript;
    }
}
function replaceVariables(config, variables) {
    if (config.backend?.scripts) {
        for (const [key, script] of Object.entries(config.backend.scripts)) {
            config.backend.scripts[key] =
                replaceVariableInScript(script, variables);
        }
    }
    if (config.frontend) {
        if (Array.isArray(config.frontend)) {
            for (const frontend of config.frontend) {
                if (frontend.scripts) {
                    for (const [key, script] of Object.entries(frontend.scripts)) {
                        frontend.scripts[key] =
                            replaceVariableInScript(script, variables);
                    }
                }
            }
        }
        else {
            if (config.frontend.scripts) {
                for (const [key, script] of Object.entries(config.frontend.scripts)) {
                    config.frontend.scripts[key] =
                        replaceVariableInScript(script, variables);
                }
            }
        }
    }
    return config;
}
export class YamlConfigurationIOController {
    constructor(filePath = "./genezio.yaml", variables = { stage: "prod" }, fs = nativeFs) {
        this.filePath = filePath;
        this.variables = variables;
        this.fs = fs;
        this.ctx = undefined;
        this.cachedConfig = undefined;
        this.latestRead = undefined;
    }
    async read(fillDefaults = true, cache = true) {
        let lastModified;
        try {
            lastModified = this.fs.statSync(this.filePath).mtime;
        }
        catch {
            throw new UserError(GENEZIO_CONFIGURATION_FILE_NOT_FOUND);
        }
        if (this.cachedConfig && cache && this.latestRead && this.latestRead >= lastModified) {
            if (fillDefaults) {
                return fillDefaultGenezioConfig(replaceVariables(structuredClone(this.cachedConfig), this.variables));
            }
            return structuredClone(this.cachedConfig);
        }
        const fileContent = (await this.fs.promises.readFile(this.filePath, "utf8"));
        this.latestRead = lastModified;
        const [rawConfig, ctx] = parseYaml(fileContent);
        let genezioConfig;
        try {
            genezioConfig = parseGenezioConfig(rawConfig);
        }
        catch (e) {
            let v2RawConfig = undefined;
            if (!("yamlVersion" in rawConfig)) {
                v2RawConfig = await tryV2Migration(rawConfig);
            }
            if (v2RawConfig) {
                genezioConfig = parseGenezioConfig(v2RawConfig);
                await this.fs.promises.writeFile(this.filePath, yaml.stringify(genezioConfig));
            }
            else {
                if (e instanceof zod.ZodError) {
                    throw new UserError(`There was a problem parsing your YAML configuration!\n${zodFormatError(e)}`);
                }
                throw new UserError(`There was a problem parsing your YAML configuration!\n${e}`);
            }
        }
        this.variables.projectName = genezioConfig.name;
        // Cache the context and the checked config
        this.ctx = ctx;
        this.cachedConfig = structuredClone(genezioConfig);
        // Fill default values
        if (fillDefaults) {
            return fillDefaultGenezioConfig(replaceVariables(genezioConfig, this.variables));
        }
        return genezioConfig;
    }
    async write(data) {
        this.fs.writeFileSync(this.filePath, stringifyYaml(data, this.ctx));
        this.latestRead = new Date();
        this.cachedConfig = structuredClone(data);
    }
}
export default new YamlConfigurationIOController();
