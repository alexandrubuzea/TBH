export declare const getProjectsForUser: (index: number, limit: number) => Promise<import("axios").AxiosResponse<any>>;
export declare const getProjectById: (projectId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const deleteProjectById: (projectId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getClassById: (classId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getProjectRepositories: (projectId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getLogs: (classId: string, startTime: any, endTime: any, searchTerm: string, nextToken?: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const changeClassStatus: (classId: string, status: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const getAccessTokens: () => Promise<import("axios").AxiosResponse<any>>;
export declare const deleteAccessToken: (tokenId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const createAccessToken: (name: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getStripeSubscriptionLink: (subscriptionPlan: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getStripeCustomerPortalLink: () => Promise<import("axios").AxiosResponse<any>>;
export declare const cancelStripeSubscription: () => Promise<import("axios").AxiosResponse<any>>;
export declare const getUserInformation: () => Promise<import("axios").AxiosResponse<any>>;
export declare const getSubscriptionPlans: () => Promise<import("axios").AxiosResponse<any>>;
export declare const getFrontendByProjectId: (projectId: string, envId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const deleteFrontendByDomain: (domain: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const createUserDetails: (data: object) => Promise<import("axios").AxiosResponse<any>>;
export declare const deleteFrontendByCustomDomain: (domain: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const requestCustomDomain: (genezioDomain: string, customDomain: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const restartFrontendDomainCron: (domain: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getProjectEnv: (projectId: string, envId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const createProjectEnv: (projectId: string, envId: string, environmentVariables: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const deleteProjectEnv: (projectId: string, envId: string, environmentVariableId: any) => Promise<void>;
export declare const getAllIntegrations: () => Promise<import("axios").AxiosResponse<any>>;
export declare const getProjectIntegrations: (projectId: string, envId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const deactivateIntegration: (projectId: string, envId: string, integrationName: string) => Promise<void>;
export declare const connectExternalOAuth: (DatabaseOauthConnectionUrl: string) => Promise<void>;
export declare const createUpstashDatabase: (databaseInfo: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const getUpstashDatabases: () => Promise<import("axios").AxiosResponse<any>>;
export declare const addProjectIntegration: (projectId: string, envId: string, payload: any) => Promise<void>;
export declare const getUserRepositories: () => Promise<import("axios").AxiosResponse<any>>;
export declare const connectUserToGithub: (installationId?: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getTemplates: () => Promise<import("axios").AxiosResponse<any>>;
export declare const createProject: (projectDetails: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const checkIntegrationUser: (integrationName: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const disconnectIntegration: (integrationName: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const createNeonProject: (projectData: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const getNeonProjects: () => Promise<import("axios").AxiosResponse<any>>;
export declare const getNeonProjectDetails: (projectId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const oauthRedirect: (integrationName: string, params: string) => Promise<any>;
export declare const getIntegrationEnvironmentVariablesList: (projectId: string, envId: string, integrationName: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getProjectDetailsByName: (projectName: string, region: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getProjectSubdomains: (projectId: string, envId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getDeployStatus: (owner: string, repo: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getCollaborationRoles: () => Promise<import("axios").AxiosResponse<any>>;
export declare const getCollaborators: (projectId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const addCollaborators: (projectId: string, collaborators: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const removeCollaborator: (requestId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getInvitationDetails: (requestId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const acceptCollaborationInvitation: (requestId: string, payload: boolean) => Promise<import("axios").AxiosResponse<any>>;
export declare const getCurrentCollaboratorDetails: (projectId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const updateCollaboratorRole: (reuqestId: string, roleId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getAuthProviders: (envId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const enableAuthProvider: (envId: string, data: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const getAuth: (envId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const activateAuth: (envId: string, data: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const updateEmailTemplates: (envId: string, data: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const getAuthEmailTemplate: (envId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getAllDatabases: () => Promise<import("axios").AxiosResponse<any>>;
export declare const getDatabaseConnectionURL: (databaseId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const deleteDatabase: (databaseId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const createDatabase: (databaseInfo: any) => Promise<import("axios").AxiosResponse<any>>;
export declare const resetDatabasePassword: (databaseId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const getLinkedDatabases: (projectId: string, envId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const linkDatabaseToProject: (projectId: string, envId: string, databaseId: string) => Promise<import("axios").AxiosResponse<any>>;
export declare const unlinkDatabaseFromProject: (projectId: string, envId: string, databaseId: string) => Promise<import("axios").AxiosResponse<any>>;
//# sourceMappingURL=ApiAxios.d.ts.map